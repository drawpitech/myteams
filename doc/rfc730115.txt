RFC 730115           Myteams communication protocole       Page 1
    teams

MyTeams protocole

Célian Lombardot
Clément Boillot


As part of the MyTeams project, we're defining a communication protocol
between client and server components. MyTeams aims to reproduce a team
collaboration application (such as teams, but simpler).
This RFC outlines the protocol to ensure smooth interaction across platforms.

Some specific characters to understand the grammar:
    [] -> Arguments needed
    "" -> argument must be quoted
    ?  -> argument optional
    *  -> 0 or multiple argument

We have added this command to our server

LOGIN [“user_name”]
    : set the user_name used by client

LOGOUT
    : disconnect the client from the server

USERS
    : get the list of all users that exist on the domain

USER [“user_uuid”]
    : get details about the requested user

SEND [“user_uuid”] [“message_body”]
    : send a message to specific user

MESSAGES [“user_uuid”]
    : list all messages exchanged with the specified user

SUBSCRIBE [“team_uuid”]
    : subscribe to the events of a team and its sub directories
        (enable reception of all events from a team)

SUBSCRIBED ?[“team_uuid”]
    : list all subscribed teams or list all users subscribed to a team

UNSUBSCRIBE  [“team_uuid”]
    : unsubscribe from a team

USE ?[“team_uuid”] ?[“channel_uuid”] ?[“thread_uuid”]
    : Sets the command context to a team/channel/thread

CREATE
    : based on the context, create the sub resource

LIST
    : based on the context, list all the sub resources

INFO
    : based on the context, display details of the current resource










In response to these commands, the server can send to the client multiple things.
The server response is made withe a code, followed by the content :

[code] ?[content]


the code is a 3 digit number which follow this format :

123

Digit 1 -> message type:
    2xx SUCCESS
    3xx EVENT
    5xx ERROR

By standard, 0 are used for generic info.

Second digit describe the message class, and third is used for the info type.
Such as:




2xx  ------------------------------------ SUCCESS

    20x -> Generic SUCCESS

    21x -> Give a list of ressource.
        All the 21x response should be constructed on this base :
            21x [nb] *[resource]
        where [nb] is the number of resource following in the message.

        211 -> Gives a list of teams

        212 -> Gives a list of channels

        213 -> Gives a list of threads

        214 -> Gives a list of replies

        215 -> Gives a list of users

        216 -> Gives a list of messages




3xx  ------------------------------------ EVENTS


    30x -> Generic EVENTS


    31x -> Sends login/logout informations, this should be send to every user
            each time a user login/logout
        31x responses should be constructed on this base :
            31x ?[resource]

        311 -> Gives the login informations

        312 -> Gives the logout informations


    32x -> Sends message informations, this should be send to a specific
            user when he receive a private message.
        32x responses should be constructed on this base :
            32x [message]

        320 -> Gives the message informations


    33x -> Sends threads informations, this should be send to all user of
            a team when the thread receive a reply.
        33x responses should be constructed on this base :
            33x [reply]

        330 -> Gives the reply informations


    34x -> Sends creations informations, this should be send to all the
            concerned users when a resource is created.
        34x responses should be constructed on this base :
            34x [resource]

        341 -> Gives the created teams informations

        341 -> Gives the created channel informations

        341 -> Gives the created thread informations




5xx  ------------------------------------ ERROR


    50x -> Generic ERROR
        50x responses should be constructed on this base :
            50x [message]

        501 -> Unrecognised command

        503 -> syntax error

        503 -> not implemented (reply when a command is not implemented)


    51x -> Unknown resource error, reply when the client
        need an unknown ressource
        51x responses should be constructed on this base :
            51x [message]

        511 -> Unknown team

        512 -> Unknown channel

        513 -> Unknown thread

        514 -> Unknown user


    52x -> Unauthorized error, reply when the user try to do an
            action he is not allowed to perform.
        52x responses should be constructed on this base :
            52x [message]

        520 -> User is Unauthorized


    53x -> Unauthorized error, reply when the user try to do an
            action and the resource already exist
        53x responses should be constructed on this base :
            53x [message]

        530 -> Ressource already exist
